@keyframes moveInLeft {
  /*using usualy 2 properties - opacity and transform*/
  0% {
    opacity: 0;
    transform: translateX(-10rem);
    /*animation in X direction*/ }
  /*start*/
  80% {
    transform: translate(1rem); }
  /*middle*/
  100% {
    opacity: 1;
    transform: translate(0);
    /*back to initial state*/ }
  /* finish */ }

@keyframes moveInRight {
  /*using usualy 2 properties - opacity and transform*/
  0% {
    opacity: 0;
    transform: translateX(10rem);
    /*animation in X direction*/ }
  /*start*/
  80% {
    transform: translate(-1rem); }
  /*middle*/
  100% {
    opacity: 1;
    transform: translate(0);
    /*back to initial state*/ }
  /* finish */ }

@keyframes moveInBottom {
  /*using usualy 2 properties - opacity and transform*/
  0% {
    opacity: 0;
    transform: translateY(3rem);
    /*animation in Y direction, positive moving down*/ }
  /*start*/
  100% {
    opacity: 1;
    transform: translate(0); }
  /* finish */ }

/*universal selector*/
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit; }

html {
  /*root element*/
  font-size: 62.5%;
  /*root element to make 10px is bad practise, 
    better in percent that user could change default browser font size*/ }

body {
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  /*1.7 times bigger, then predefined*/
  color: #777;
  padding: 3rem;
  box-sizing: border-box;
  /*borders and paddings are no longer added to the total widthor total height*/ }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  /*corrects animation shacking*/
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    /*block takes all width and create line-breaks*/
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    /**/
    /*
    animation-delay: 1s;
    animation-iteration-count: 3; 
    */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1s ease-out;
    /*shorter then above*/ }

.btn:link, .btn:visited {
  /* visited - when user already clicked once */
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  display: inline-block;
  /*do that if there are some paddings, inline-block treated as a text*/
  border-radius: 10rem;
  transition: all 0.2s;
  position: relative;
  font-size: 1.6rem; }

.btn:hover {
  transform: translateY(-0.3rem);
  /*minus - go up*/
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
  /*1st - offset x direction, 2nd - y direction, 3rd - blur, 4th - color*/ }
  .btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    /*scale increase an element*/
    opacity: 0;
    /*fading out*/ }

.btn:active {
  transform: translateY(-0.1rem);
  /*related to initial link state*/
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }

.btn--white {
  background-color: #fff;
  color: #777; }
  .btn--white::after {
    background-color: #fff; }

.btn::after {
  /*pseudoelement is treated as a child of element*/
  content: '';
  /*always necessary*/
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  /*appearance behind intitial button*/
  transition: all 0.4s; }

.btn--animated {
  animation: moveInBottom 0.5s ease-out 0.75s;
  /*last for delay*/
  animation-fill-mode: backwards;
  /*automaticaly applies the styles before animation starts*/ }

.row {
  max-width: 114rem;
  background-color: #d4d1d1;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: '';
    display: table;
    clear: both; }
  .row [class^='col-'] {
    background-color: chocolate;
    float: left; }
    .row [class^='col-']:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc( 2 * ((100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-2-of-4 {
    width: calc( 2 * ((100% - 3 * 6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc( 3 * ((100% - 3 * 6rem) / 4) + 2 * 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }

.header {
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  background-size: cover;
  /*fot element inside the box*/
  background-position: top;
  clip-path: polygon(0 0, 100% 0, 100% 75%, 0 100%);
  /*specify corners from top clock-wise (x y, x y, x y, x y)*/
  /*https://bennettfeely.com/clippy/*/
  position: relative;
  /*img is inline element, thats why it is better to wrap it in div*/ }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    /*reference - where the top and left start to count will be header possition relative*/
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    top: 40%;
    /*is in relation with parent element (header)*/
    left: 50%;
    transform: translate(-50%, -50%);
    /*move box to center, it is in relation to elemen it self*/
    text-align: center; }
